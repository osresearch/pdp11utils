        .TITLE  PAKDUMP

;;; Register definitions
;;; DL11
SERBAS = 777560 ; Base address of serial port 
RCSR = 777560   ; RX Status
RBUF = 777562   ; RX Buffer
XCSR = 777564   ; TX Status
XBUF = 777566   ; TX Buffer

;;; RK11
RKDS = 777400   ; Drive Status
RKER = 777402   ; Error
RKCS = 777404   ; Control Status
RKWC = 777406   ; Word Count
RKBA = 777410   ; Bus Address
RKDA = 777412   ; Disk Address
RKDB = 777416   ; Data Buffer

ITOP  = 0400                    ; End of the interrupt vector

.MACRO  WRITE   BUFFER, N
        MOV     BUFFER,-(SP)
        MOV     N,-(SP)
        JSR     PC,IWRITE-.-4
        ADD     #4,SP
.ENDM   WRITE

;;; Wait for RK11 ready bit
.MACRO  RKRDYW  ?LAB
LAB:    BIT     @#RKCS,#0200    ; Check drive ready
        BEQ     LAB
.ENDM   RKRDYW

;;; PAKDUMP.MAC: dump RK05 decpack drives to the terminal as
;;; raw binary code.
;;;
;;; Operation:
;;; PAKDUMP emits "READY\n" on the terminal when it's ready to go.
;;; It waits for a single numeric character to indicate which drive
;;; to dump, and then dumps all data.
;;;

;;; Memory Map: (all values in octal)
;;; 001000 - start of code
;;; 002000 - start of text
;;; 010000 - start of buffer
;;; 077776 - top of stack

        .ASECT
.=1000
START:
        ;; Set up SP (start @32K)
        MOV     #077776,SP
        ;; Initialize interrupt vector
        MOV     #ITOP,R1
IFILL:  MOV     #240,-(R1)      ; Priority five
        MOV     #NISR,-(R1)     ; Null interrupt
        TST     R1
        BNE     IFILL
        
        ;; Emit ready msg
        WRITE   #MREADY,#5
        ;; Wait for disk number
        JSR     PC,GETCH-.-4
        SUB     #060,R1         ; Convert from char to int
        ;; Init disk
        RKRDYW                  ; Wait for controller ready
        MOV     #000001,@#RKCS  ; Issue controller reset
        RKRDYW                  ; Wait for controller ready
        MOV     R1,R2
        ASH     #13,R2
        MOV     R2,@#RKDA       ; Set address of 0,0,0 on drive

        MOV     #203, R5        ; R5 - cylinder count
CYLRD:
        ;; Check for hard error
        BIT     @#RKCS,#040000    ; Check drive ready
        BEQ     SKIPRST
        ;; Reset for hard error and resume at last block
        MOV     @#RKDA,R4
        MOV     #000001,@#RKCS  ; Issue controller reset
        RKRDYW                  ; Wait for controller ready
        MOV     R4,@#RKDA
SKIPRST:        
        ;; Read cylinder
        MOV     #-14000,@#RKWC  ; Load an entire cylinder
        MOV     #010000,@#RKBA   ; Start loading at location 10000
        MOV     #000005,@#RKCS  ; Begin read
        RKRDYW
        ;; Dump cylinder
        WRITE   #010000,$14000 

        DEC     R5
        BNE     CYLRD
        
DONE:
        BIT     @#XCSR,#000200  ; Check XMIT RDY
        BEQ     DONE            ; Loop if not set
        HALT

;;; Null ISR: return from interrupt. 
NISR:
        RTI
        
;;; Print function
IWRITE:
        MOV     R1,-(SP)
        MOV     R2,-(SP)
        MOV     6(SP),R2        ; R2 - count
        MOV     10(SP),R1       ; R1 - buffer
WRLOOP:
        BIT     @#XCSR,#000200  ; Check XMIT RDY
        BEQ     WRLOOP          ; Loop if not set
        MOVB    (R1)+,@#XBUF    ; Write character to XBUF
        DEC     R2
        BNE     WRLOOP
WREND:
        MOV     R2,(SP)+
        MOV     R1,(SP)+
        RTS     PC

;;; Getch function: returns next received character in R1.
;;; Does not time out.
GETCH:                          
        BIT     @#RCSR,#000200  ; Check RX ready
        BEQ     GETCH           ; Loop if not set
        MOV     @#RBUF,R1       ; Read next character
        RTS     PC

        .ASECT
.=2000       
;;; Strings
MREADY: .ASCIZ  /READY/
        .END    PAKDUMP
